t() %>%
as.data.frame() %>%
rownames_to_column(., var = "Taxon")
genus %<>%
separate(Taxon, c("Kingdom", "Phylum"), sep = ".p__") %>%
separate(Phylum, c("Phylum", "Class"), sep = ".c__") %>%
separate(Class, c("Class", "Order"), sep = ".o__") %>%
separate(Order, c("Order", "Family"), sep = ".f__") %>%
separate(Family, c("Family", "Genus"), sep = ".g__") %>%
mutate_all(na_if,"") %>%
select(-c(Kingdom:Family)) %>%
na.omit() %>%
filter(Genus != "uncultured")
colnames(genus) <- case_when(
sub("A", conlnames(genus)) ~ "A"
)
colnames(genus) <- case_when(
grepl("A", conlnames(genus)) ~ "A"
)
colnames(genus) <- case_when(
grepl("A", colnames(genus)) ~ "A"
)
genus
genus <- read.csv("level-6.csv", header = TRUE) %>%
set_rownames(.$index) %>%
select(-c(site, description, sample_type, index)) %>%
t() %>%
as.data.frame() %>%
rownames_to_column(., var = "Taxon")
genus %<>%
separate(Taxon, c("Kingdom", "Phylum"), sep = ".p__") %>%
separate(Phylum, c("Phylum", "Class"), sep = ".c__") %>%
separate(Class, c("Class", "Order"), sep = ".o__") %>%
separate(Order, c("Order", "Family"), sep = ".f__") %>%
separate(Family, c("Family", "Genus"), sep = ".g__") %>%
mutate_all(na_if,"") %>%
select(-c(Kingdom:Family)) %>%
na.omit() %>%
filter(Genus != "uncultured") # Eliminar los que digan uncultured
colnames(genus) <- case_when(
grepl("A", colnames(genus)) ~ "A",
grepl("B", colnames(genus)) ~ "B",
grepl("C", colnames(genus)) ~ "C",
grepl("D", colnames(genus)) ~ "D"
)
genus
genus <- read.csv("level-6.csv", header = TRUE) %>%
set_rownames(.$index) %>%
select(-c(site, description, sample_type, index)) %>%
t() %>%
as.data.frame() %>%
rownames_to_column(., var = "Taxon")
genus %<>%
separate(Taxon, c("Kingdom", "Phylum"), sep = ".p__") %>%
separate(Phylum, c("Phylum", "Class"), sep = ".c__") %>%
separate(Class, c("Class", "Order"), sep = ".o__") %>%
separate(Order, c("Order", "Family"), sep = ".f__") %>%
separate(Family, c("Family", "Genus"), sep = ".g__") %>%
mutate_all(na_if,"") %>%
select(-c(Kingdom:Family)) %>%
na.omit() %>%
filter(Genus != "uncultured") # Eliminar los que digan uncultured
genus
genus <- read.csv("level-6.csv", header = TRUE) %>%
set_rownames(.$index) %>%
select(-c(site, description, sample_type, index)) %>%
t() %>%
as.data.frame() %>%
rownames_to_column(., var = "Taxon")
genus %<>%
separate(Taxon, c("Kingdom", "Phylum"), sep = ".p__") %>%
separate(Phylum, c("Phylum", "Class"), sep = ".c__") %>%
separate(Class, c("Class", "Order"), sep = ".o__") %>%
separate(Order, c("Order", "Family"), sep = ".f__") %>%
separate(Family, c("Family", "Genus"), sep = ".g__") %>%
mutate_all(na_if,"") %>%
select(-c(Kingdom:Family)) %>%
na.omit() %>%
filter(Genus != "uncultured") %>%# Eliminar los que digan uncultured
set_rownames(.$Genus) %>%
select(-Genus) %>%
t()
genus %<>%
mutate(site = case_when(
grepl("A", rownames(.)) ~ "A",
grepl("A", rownames(.)) ~ "A",
grepl("A", rownames(.)) ~ "A",
))
genus %<>%
mutate(site = case_when(
grepl("A", rownames(.)) ~ "A",
grepl("B", rownames(.)) ~ "B",
grepl("C", rownames(.)) ~ "C",
grepl("D", rownames(.)) ~ "D"
))
genus <- read.csv("level-6.csv", header = TRUE) %>%
set_rownames(.$index) %>%
select(-c(site, description, sample_type, index)) %>%
t() %>%
as.data.frame() %>%
rownames_to_column(., var = "Taxon")
genus %<>%
separate(Taxon, c("Kingdom", "Phylum"), sep = ".p__") %>%
separate(Phylum, c("Phylum", "Class"), sep = ".c__") %>%
separate(Class, c("Class", "Order"), sep = ".o__") %>%
separate(Order, c("Order", "Family"), sep = ".f__") %>%
separate(Family, c("Family", "Genus"), sep = ".g__") %>%
mutate_all(na_if,"") %>%
select(-c(Kingdom:Family)) %>%
na.omit() %>%
filter(Genus != "uncultured") %>%# Eliminar los que digan uncultured
set_rownames(.$Genus) %>%
select(-Genus) %>%
t() %>%
as.data.frame()
genus %<>%
mutate(site = case_when(
grepl("A", rownames(.)) ~ "A",
grepl("B", rownames(.)) ~ "B",
grepl("C", rownames(.)) ~ "C",
grepl("D", rownames(.)) ~ "D"
))
genus
summarise(across(cols = everything, .funs = list(mean = mean))
das
gen.indval.df  <- genus %>%
transmute(
group_by(site) %>%
summarise(across(cols = everything, .funs = list(mean = mean)))
)
genus
class(genus$Aenigmarchaeales)
View(genus)
gen.indval.df  <- genus %>%
group_by(site) %>%
summarise(across(cols = everything, .funs = list(mean = mean)))
View(gen.indval.df)
gen.indval.df  <- genus %>%
group_by(site) %>%
summarise(across(cols = everything, .funs = list(mean = mean)))
gen.indval.df
gen.indval.df  <- genus %>%
group_by(site) %>%
summarise(across(cols = everything(), .funs = list(mean = mean)))
View(gen.indval.df)
genus %<>%
mutate(site = case_when(
grepl("A", rownames(.)) ~ "A",
grepl("B", rownames(.)) ~ "B",
grepl("C", rownames(.)) ~ "C",
grepl("D", rownames(.)) ~ "D"
))
gen.indval.df  <- genus %>%
group_by(site) %>%
summarise(across(cols = everything(), .funs = list(mean = mean)))
gen.indval.df  <- genus %>%
group_by(site) %>%
summarise(across(cols = everything(.), .funs = list(mean = mean)))
gen.indval.df  <- genus %>%
group_by(site) %>%
summarise(across(cols = everything(.), .funs = list(mean = mean),
.groups = "drop"))
gen.indval.df
genus
genus <- read.csv("level-6.csv", header = TRUE) %>%
set_rownames(.$index) %>%
select(-c(site, description, sample_type, index)) %>%
t() %>%
as.data.frame() %>%
rownames_to_column(., var = "Taxon")
genus %<>%
separate(Taxon, c("Kingdom", "Phylum"), sep = ".p__") %>%
separate(Phylum, c("Phylum", "Class"), sep = ".c__") %>%
separate(Class, c("Class", "Order"), sep = ".o__") %>%
separate(Order, c("Order", "Family"), sep = ".f__") %>%
separate(Family, c("Family", "Genus"), sep = ".g__") %>%
mutate_all(na_if,"") %>%
select(-c(Kingdom:Family)) %>%
na.omit() %>%
filter(Genus != "uncultured") %>%# Eliminar los que digan uncultured
set_rownames(.$Genus) %>%
select(-Genus) %>%
t() %>%
as.data.frame()
genus %<>%
mutate(as.factor(site = case_when(
grepl("A", rownames(.)) ~ "A",
grepl("B", rownames(.)) ~ "B",
grepl("C", rownames(.)) ~ "C",
grepl("D", rownames(.)) ~ "D"
)))
genus %<>%
mutate(site = case_when(
grepl("A", rownames(.)) ~ "A",
grepl("B", rownames(.)) ~ "B",
grepl("C", rownames(.)) ~ "C",
grepl("D", rownames(.)) ~ "D"
))
genus
gen.indval.df  <- genus %>%
group_by(site) %>%
summarise(across(cols = everything(.), .funs = list(mean = mean)))
gen.indval.df
gen.indval.df  <- genus %>%
group_by(site) %>%
summarise_all(across(cols = everything(.), .funs = list(mean = mean)))
gen.indval.df  <- genus %>%
group_by(site) %>%
summarise_all(across(.funs = list(mean = mean)))
summarise_all((.funs = list(mean = mean))
sad
gen.indval.df  <- genus %>%
group_by(site) %>%
summarise_all(.funs = list(mean = mean))
gen.indval.df
gen.indval.df  <- genus %>%
group_by(site) %>%
summarise_all(.funs = list(mean = mean)) %>%
mutate_if(is.numeric, round)
gen.indval.df
gen.indval.df  <- genus %>%
group_by(site) %>%
summarise_all(.funs = list(mean)) %>%
mutate_if(is.numeric, round)
gen.indval.df  <- genus %>%
group_by(site) %>%
summarise_all(.funs = list(sum)) %>%
mutate_if(is.numeric, round)
gen.indval.df  <- genus %>%
group_by(site) %>%
summarise_all(.funs = list(sum)) %>%
mutate_if(is.numeric, round) %>%
set_rownames(.$site) %>%
select(-site)
gen.indval.df  <- genus %>%
group_by(site) %>%
summarise_all(.funs = list(sum)) %>%
mutate_if(is.numeric, round) %>%
as.data.frame()%>%
set_rownames(.$site) %>%
select(-site)
gen.indval.df
gen.indval.df  <- genus %>%
group_by(site) %>%
summarise_all(.funs = list(sum)) %>%
mutate_if(is.numeric, round) %>%
as.data.frame()%>%
set_rownames(.$site) %>%
select(-site) %>%
t()
gen.indval.df  <- genus %>%
group_by(site) %>%
summarise_all(.funs = list(sum)) %>%
mutate_if(is.numeric, round) %>%
as.data.frame()%>%
set_rownames(.$site) %>%
select(-site)
gen.indval.df
prep.indval.df  <- genus %>%
group_by(site) %>%
summarise_all(.funs = list(sum)) %>%
mutate_if(is.numeric, round) %>%
as.data.frame()%>%
set_rownames(.$site) %>%
select(-site)
indval.df <- select(indval, -row.names())
indval.df <- select(prep.indval.df, -row.names())
indval.df <- select(prep.indval.df, -row.names
indval.df <- select(prep.indval.df, -row.names)
indval.df <- select(prep.indval.df, -row.names)
indval.df <-
das
indval.df <- as.matrix(prep.indval.df)
indval.df
indval.matrix <- as.matrix(prep.indval.df)
sites <- as.vector(prep.indval.df$row.names)
sites
indval.matrix
sites <- as.vector(rownames(prep.indval.df))
sites
indval <- mutipatt(indval.matrix, sites, duleg = FALSE)
library(indicspecies)
indval <- mutipatt(indval.matrix, sites, duleg = FALSE)
indval <- multipatt(indval.matrix, sites, duleg = FALSE)
indval
summary(indval)
summary(indval, indvalcomp = TRUE)
indval
genus <- read.csv("level-6.csv", header = TRUE) %>%
set_rownames(.$index) %>%
select(-c(site, description, sample_type, index)) %>%
t() %>%
as.data.frame() %>%
rownames_to_column(., var = "Taxon")
genus %<>%
separate(Taxon, c("Kingdom", "Phylum"), sep = ".p__") %>%
separate(Phylum, c("Phylum", "Class"), sep = ".c__") %>%
separate(Class, c("Class", "Order"), sep = ".o__") %>%
separate(Order, c("Order", "Family"), sep = ".f__") %>%
separate(Family, c("Family", "Genus"), sep = ".g__") %>%
mutate_all(na_if,"") %>%
select(-c(Kingdom:Family)) %>%
na.omit() %>%
filter(Genus != "uncultured") %>%# Eliminar los que digan uncultured
set_rownames(.$Genus) %>%
select(-Genus) %>%
t() %>%
as.data.frame()
genus %<>%
mutate(site = case_when(
grepl("A", rownames(.)) ~ "A",
grepl("B", rownames(.)) ~ "B",
grepl("C", rownames(.)) ~ "C",
grepl("D", rownames(.)) ~ "D"
))
prep.indval.df  <- genus %>%
group_by(site) %>%
summarise_all(.funs = list(sum)) %>%
mutate_if(is.numeric, round) %>%
as.data.frame()%>%
set_rownames(.$site) %>%
select(-site)
indval.matrix <- as.matrix(prep.indval.df)
sites <- as.vector(rownames(prep.indval.df))
indval <- multipatt(indval.matrix, sites, duleg = FALSE)
summary(indval, indvalcomp = TRUE)
indval <- multipatt(indval.matrix, sites, duleg = TRUE)
summary(indval, indvalcomp = TRUE)
indval
genus <- read.csv("level-6.csv", header = TRUE) %>%
set_rownames(.$index) %>%
select(-c(site, description, sample_type, index)) %>%
t() %>%
as.data.frame() %>%
rownames_to_column(., var = "Taxon")
genus %<>%
separate(Taxon, c("Kingdom", "Phylum"), sep = ".p__") %>%
separate(Phylum, c("Phylum", "Class"), sep = ".c__") %>%
separate(Class, c("Class", "Order"), sep = ".o__") %>%
separate(Order, c("Order", "Family"), sep = ".f__") %>%
separate(Family, c("Family", "Genus"), sep = ".g__") %>%
mutate_all(na_if,"") %>%
select(-c(Kingdom:Family)) %>%
na.omit() %>%
filter(Genus != "uncultured") %>%# Eliminar los que digan uncultured
set_rownames(.$Genus) %>%
select(-Genus) %>%
t() %>%
as.data.frame()
genus %<>%
mutate(site = case_when(
grepl("A", rownames(.)) ~ "A",
grepl("B", rownames(.)) ~ "B",
grepl("C", rownames(.)) ~ "C",
grepl("D", rownames(.)) ~ "D"
))
prep.indval.df  <- genus %>%
group_by(site) %>%
summarise_all(.funs = list(sum)) %>%
mutate_if(is.numeric, round) %>%
as.data.frame()%>%
set_rownames(.$site) %>%
select(-site)
indval.matrix <- as.matrix(prep.indval.df)
sites <- as.vector(rownames(prep.indval.df))
indval <- multipatt(indval.matrix, sites, duleg = TRUE)
summary(indval, indvalcomp = TRUE)
indval.matrix
indval.matrix <- as.matrix(prep.indval.df) %>%
[-0,]
indval.matrix <- as.matrix(prep.indval.df) %>%
.[-0,]
indval.matrix
indval.matrix <- as.matrix(prep.indval.df) %>%
.[,-0]
indval.matrix
indval.matrix <- as.matrix(prep.indval.df)
indval.matrix
View(indval.matrix)
rownames(indval.matrix) <- NULL
sites <- as.vector(rownames(prep.indval.df))
indval <- multipatt(indval.matrix, sites, duleg = FALSE)
summary(indval, indvalcomp = TRUE)
genus <- read.csv("level-6.csv", header = TRUE) %>%
set_rownames(.$index) %>%
select(-c(site, description, sample_type, index)) %>%
t() %>%
as.data.frame() %>%
rownames_to_column(., var = "Taxon")
genus %<>%
separate(Taxon, c("Kingdom", "Phylum"), sep = ".p__") %>%
separate(Phylum, c("Phylum", "Class"), sep = ".c__") %>%
separate(Class, c("Class", "Order"), sep = ".o__") %>%
separate(Order, c("Order", "Family"), sep = ".f__") %>%
separate(Family, c("Family", "Genus"), sep = ".g__") %>%
mutate_all(na_if,"") %>%
select(-c(Kingdom:Family)) %>%
na.omit() %>%
filter(Genus != "uncultured") %>%# Eliminar los que digan uncultured
set_rownames(.$Genus) %>%
select(-Genus) %>%
t() %>%
as.data.frame()
genus %<>%
mutate(site = case_when(
grepl("A", rownames(.)) ~ "A",
grepl("B", rownames(.)) ~ "B",
grepl("C", rownames(.)) ~ "C",
grepl("D", rownames(.)) ~ "D"
))
prep.indval.df  <- genus %>%
group_by(site) %>%
summarise_all(.funs = list(sum)) %>%
mutate_if(is.numeric, round) %>%
as.data.frame()%>%
set_rownames(.$site) %>%
select(-site)
indval.matrix <- as.matrix(prep.indval.df)
rownames(indval.matrix) <- NULL
sites <- as.vector(rownames(prep.indval.df))
indval <- multipatt(indval.matrix, sites, duleg = FALSE)
summary(indval, indvalcomp = TRUE)
indval
prep.indval.df  <- genus %>%
#group_by(site) %>%
#summarise_all(.funs = list(sum)) %>%
#mutate_if(is.numeric, round) %>%
#as.data.frame()%>%
set_rownames(.$site) %>%
select(-site)
prep.indval.df
View(prep.indval.df)
genus
genus %<>%
mutate(site = case_when(
grepl("A", rownames(.)) ~ "A",
grepl("B", rownames(.)) ~ "B",
grepl("C", rownames(.)) ~ "C",
grepl("D", rownames(.)) ~ "D"
))
indval.matrix <- as.matrix(genus)
indval.matrix
rownames(indval.matrix) <- NULL
sites <- as.vector(genus$site)
indval <- multipatt(indval.matrix, sites, duleg = FALSE)
indval.matrix <- as.matrix(genus) %>%
select(-site)
indval.matrix <- as.matrix(genus) %>%
select(-sites)
indval.matrix <- genus %>%
select(-site) %>%
as.matrix()
rownames(indval.matrix) <- NULL
sites <- as.vector(genus$site)
indval <- multipatt(indval.matrix, sites, duleg = FALSE)
summary(indval, indvalcomp = TRUE)
genus <- read.csv("level-6.csv", header = TRUE) %>%
set_rownames(.$index) %>%
select(-c(site, description, sample_type, index)) %>%
t() %>%
as.data.frame() %>%
rownames_to_column(., var = "Taxon")
genus %<>%
separate(Taxon, c("Kingdom", "Phylum"), sep = ".p__") %>%
separate(Phylum, c("Phylum", "Class"), sep = ".c__") %>%
separate(Class, c("Class", "Order"), sep = ".o__") %>%
separate(Order, c("Order", "Family"), sep = ".f__") %>%
separate(Family, c("Family", "Genus"), sep = ".g__") %>%
mutate_all(na_if,"") %>%
select(-c(Kingdom:Family)) %>%
na.omit() %>%
filter(Genus != "uncultured") %>%# Eliminar los que digan uncultured
set_rownames(.$Genus) %>%
select(-Genus) %>%
t() %>%
as.data.frame()
genus %<>%
mutate(site = case_when(
grepl("A", rownames(.)) ~ "A",
grepl("B", rownames(.)) ~ "B",
grepl("C", rownames(.)) ~ "C",
grepl("D", rownames(.)) ~ "D"
))
indval.matrix <- genus %>%
select(-site) %>%
as.matrix()
rownames(indval.matrix) <- NULL
sites <- as.vector(genus$site)
indval <- multipatt(indval.matrix, sites, duleg = FALSE)
summary(indval, indvalcomp = TRUE)
indval$A
indval$sign
indval$cluster
indval$func
summary(indval, indvalcomp = TRUE)
indval
summary(indval, indvalcomp = TRUE)
summary(indval, indvalcomp = TRUE)@Group
class(inval)
class(indval)
x <. capture.output(summary(indval, indvalcomp = TRUE))
x <- capture.output(summary(indval, indvalcomp = TRUE))
x
x
indval <- multipatt(indval.matrix, sites, duleg = FALSE, control = how(nperm=999))
summary(indval, indvalcomp = TRUE)
x <- capture.output(summary(indval, indvalcomp = TRUE))
x
as.data.frame(x)
write.csv(x, "multipatt_results.csv")
indval
summary(indval, indvalcomp = TRUE)
